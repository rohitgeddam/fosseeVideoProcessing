[{"/Users/rohitgeddam/Development/projects/fosseeVideoProcessing/ui/src/App.tsx":"1","/Users/rohitgeddam/Development/projects/fosseeVideoProcessing/ui/src/sections/index.ts":"2","/Users/rohitgeddam/Development/projects/fosseeVideoProcessing/ui/src/sections/Upload/index.ts":"3","/Users/rohitgeddam/Development/projects/fosseeVideoProcessing/ui/src/sections/Upload/components/UploadButton.tsx":"4","/Users/rohitgeddam/Development/projects/fosseeVideoProcessing/ui/src/lib/api/axios.ts":"5","/Users/rohitgeddam/Development/projects/fosseeVideoProcessing/ui/src/lib/api/index.ts":"6","/Users/rohitgeddam/Development/projects/fosseeVideoProcessing/ui/src/lib/index.ts":"7","/Users/rohitgeddam/Development/projects/fosseeVideoProcessing/ui/src/index.tsx":"8","/Users/rohitgeddam/Development/projects/fosseeVideoProcessing/ui/src/sections/Info/ShowInfo.tsx":"9","/Users/rohitgeddam/Development/projects/fosseeVideoProcessing/ui/src/sections/Info/index.ts":"10","/Users/rohitgeddam/Development/projects/fosseeVideoProcessing/ui/src/sections/Commons/index.ts":"11","/Users/rohitgeddam/Development/projects/fosseeVideoProcessing/ui/src/sections/Commons/LoadingScreen.tsx":"12","/Users/rohitgeddam/Development/projects/fosseeVideoProcessing/ui/src/sections/Editing/index.ts":"13","/Users/rohitgeddam/Development/projects/fosseeVideoProcessing/ui/src/sections/Info/components/Button.tsx":"14","/Users/rohitgeddam/Development/projects/fosseeVideoProcessing/ui/src/sections/Info/components/index.ts":"15","/Users/rohitgeddam/Development/projects/fosseeVideoProcessing/ui/src/sections/Upload/components/UploadCard.tsx":"16","/Users/rohitgeddam/Development/projects/fosseeVideoProcessing/ui/src/sections/Upload/Upload.tsx":"17","/Users/rohitgeddam/Development/projects/fosseeVideoProcessing/ui/src/sections/Editing/components/ResultsTable.tsx":"18","/Users/rohitgeddam/Development/projects/fosseeVideoProcessing/ui/src/sections/Editing/Edit.tsx":"19","/Users/rohitgeddam/Development/projects/fosseeVideoProcessing/ui/src/sections/Editing/components/index.ts":"20","/Users/rohitgeddam/Development/projects/fosseeVideoProcessing/ui/src/sections/Editing/components/AudioUploadButton.tsx":"21","/Users/rohitgeddam/Development/projects/fosseeVideoProcessing/ui/src/sections/Commons/ErrorBox.tsx":"22","/Users/rohitgeddam/Development/projects/fosseeVideoProcessing/ui/src/sections/Commons/useError.ts":"23","/Users/rohitgeddam/Development/projects/fosseeVideoProcessing/ui/src/sections/Editing/components/AudioUploadMic.tsx":"24","/Users/rohitgeddam/Development/projects/fosseeVideoProcessing/ui/src/lib/types/index.ts":"25","/Users/rohitgeddam/Development/projects/fosseeVideoProcessing/ui/src/lib/types/typeDef.ts":"26"},{"size":1239,"mtime":1609660483067,"results":"27","hashOfConfig":"28"},{"size":104,"mtime":1609662344900,"results":"29","hashOfConfig":"28"},{"size":110,"mtime":1609662312433,"results":"30","hashOfConfig":"28"},{"size":737,"mtime":1609618341984,"results":"31","hashOfConfig":"28"},{"size":378,"mtime":1609618171616,"results":"32","hashOfConfig":"28"},{"size":25,"mtime":1609618180257,"results":"33","hashOfConfig":"28"},{"size":48,"mtime":1609618189816,"results":"34","hashOfConfig":"28"},{"size":231,"mtime":1609609844134,"results":"35","hashOfConfig":"28"},{"size":3411,"mtime":1609620290371,"results":"36","hashOfConfig":"28"},{"size":28,"mtime":1609618334107,"results":"37","hashOfConfig":"28"},{"size":89,"mtime":1609618203218,"results":"38","hashOfConfig":"28"},{"size":710,"mtime":1609618227764,"results":"39","hashOfConfig":"28"},{"size":54,"mtime":1609618248235,"results":"40","hashOfConfig":"28"},{"size":830,"mtime":1609618049364,"results":"41","hashOfConfig":"28"},{"size":26,"mtime":1609658515108,"results":"42","hashOfConfig":"28"},{"size":2430,"mtime":1609618345659,"results":"43","hashOfConfig":"28"},{"size":1530,"mtime":1609618329585,"results":"44","hashOfConfig":"28"},{"size":2831,"mtime":1609620257525,"results":"45","hashOfConfig":"28"},{"size":556,"mtime":1609618250422,"results":"46","hashOfConfig":"28"},{"size":135,"mtime":1609618254574,"results":"47","hashOfConfig":"28"},{"size":1990,"mtime":1609620116541,"results":"48","hashOfConfig":"28"},{"size":635,"mtime":1609618199155,"results":"49","hashOfConfig":"28"},{"size":509,"mtime":1609618232529,"results":"50","hashOfConfig":"28"},{"size":3217,"mtime":1609619974298,"results":"51","hashOfConfig":"28"},{"size":27,"mtime":1609618184701,"results":"52","hashOfConfig":"28"},{"size":1787,"mtime":1609619882897,"results":"53","hashOfConfig":"28"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"1tes73f",{"filePath":"56","messages":"57","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"58","messages":"59","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"60","messages":"61","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"62","usedDeprecatedRules":"63"},{"filePath":"64","messages":"65","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"66","messages":"67","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"68","messages":"69","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"63"},{"filePath":"70","messages":"71","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"63"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"74","usedDeprecatedRules":"63"},{"filePath":"75","messages":"76","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"77","messages":"78","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"79","messages":"80","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"63"},{"filePath":"81","messages":"82","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"83","messages":"84","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"85","messages":"86","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"87","messages":"88","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"89"},{"filePath":"90","messages":"91","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"92","messages":"93","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"94","usedDeprecatedRules":"63"},{"filePath":"95","messages":"96","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"89"},{"filePath":"97","messages":"98","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"99","messages":"100","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"101","usedDeprecatedRules":"63"},{"filePath":"102","messages":"103","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"104"},{"filePath":"105","messages":"106","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"107","usedDeprecatedRules":"63"},{"filePath":"108","messages":"109","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"110","usedDeprecatedRules":"104"},{"filePath":"111","messages":"112","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"113","messages":"114","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/rohitgeddam/Development/projects/fosseeVideoProcessing/ui/src/App.tsx",["115"],"/Users/rohitgeddam/Development/projects/fosseeVideoProcessing/ui/src/sections/index.ts",[],"/Users/rohitgeddam/Development/projects/fosseeVideoProcessing/ui/src/sections/Upload/index.ts",[],"/Users/rohitgeddam/Development/projects/fosseeVideoProcessing/ui/src/sections/Upload/components/UploadButton.tsx",["116"],"import React from 'react';\nimport styled from 'styled-components';\nimport { UploadButtonProps } from '../../../lib';\n\nconst ButtonContainer = styled.div`\n    display: flex;\n    flex-direction: column;\n    margin: 10px;\n\n    label {\n        font-size: 20px;\n    }\n\n    input {\n        border: none;\n        padding: 5px 2px;\n        background-color: transparent;\n        color: blue;\n    }\n`;\n\nexport const UploadButton: React.FC<UploadButtonProps> = ({ label, onChange }) => {\n    const handleChange = (e: any): void => {\n        onChange(e.target.files[0]);\n    };\n\n    return (\n        <ButtonContainer>\n            <label>{label}</label>\n            <input type=\"file\" onChange={handleChange} />\n        </ButtonContainer>\n    );\n};\n",[],"/Users/rohitgeddam/Development/projects/fosseeVideoProcessing/ui/src/lib/api/axios.ts",[],"/Users/rohitgeddam/Development/projects/fosseeVideoProcessing/ui/src/lib/api/index.ts",[],"/Users/rohitgeddam/Development/projects/fosseeVideoProcessing/ui/src/lib/index.ts",[],"/Users/rohitgeddam/Development/projects/fosseeVideoProcessing/ui/src/index.tsx",[],"/Users/rohitgeddam/Development/projects/fosseeVideoProcessing/ui/src/sections/Info/ShowInfo.tsx",["117"],"import React, { useState, useRef } from 'react';\n\nimport styled from 'styled-components';\nimport ReactLoading from 'react-loading';\n\nimport { api, BASE_URL, CompileResponseType, getTaskStatus, ShowInfoProps, TaskStatusResponse } from '../../lib';\nimport { Button } from './components';\nimport { useError, ErrorBox } from '../../sections';\n\nconst InfoDiv = styled.div`\n    display: flex;\n    flex-direction: column;\n    justify-content: space-between;\n    padding: 10px;\n    min-height: 200px;\n    max-height: 400px;\n    margin: 0 40px;\n    min-width: 200px;\n    max-width: 400px;\n    font-size: 16px;\n    box-shadow: 1px 5px 16px 1px rgba(0, 0, 0, 0.2);\n    border-radius: 10px;\n`;\n\nconst Heading = styled.div`\n    width: 100%;\n    color: black;\n    background-color: #ffd66b;\n    font-size: 24px;\n    text-align: center;\n    margin-bottom: 10px;\n    letter-spacing: 3px;\n`;\n\nexport const ShowInfo: React.FC<ShowInfoProps> = ({ data }) => {\n    const [showDownloadBtn, setShowDownloadBtn] = useState<boolean>(false);\n    const [compileResultResponse, setCompileResultResponse] = useState<CompileResponseType | null>(null);\n    const [isLoading, setIsLoading] = useState<boolean>(false);\n    const [error, setError, clearError] = useError();\n    const timerRef = useRef<number | undefined>();\n\n    const polling = async (operationId: number): Promise<void> => {\n        try {\n            const response = await api.get(`generate/${operationId}`);\n            const taskId = response.data.task_id;\n            timerRef.current = window.setInterval(async () => {\n                const response: TaskStatusResponse = await getTaskStatus(taskId);\n\n                if (response.state === 'SUCCESS') {\n                    const data = (response.details as unknown) as CompileResponseType;\n                    setCompileResultResponse(data);\n                    setIsLoading(false);\n                    setShowDownloadBtn(true);\n                    window.clearInterval(timerRef.current);\n                }\n            }, 3000);\n        } catch (err) {\n            setIsLoading(false);\n            window.clearInterval(timerRef.current);\n            setError(err.message);\n        }\n    };\n\n    const handleCompile = async () => {\n        setShowDownloadBtn(false);\n        setIsLoading(true);\n        polling(data.operationId);\n    };\n\n    return (\n        <>\n            {error.isError && <ErrorBox text={error.message} onClick={clearError} />}\n            <InfoDiv>\n                <Heading>Info</Heading>\n                <p>\n                    Total Chunks: <b>{data.chunks.length}</b>\n                </p>\n                <p>\n                    Time Taken To Process: <b>{parseFloat(data.timeTaken).toFixed(2)} sec</b>\n                </p>\n                <Button text={'Compile'} onClick={handleCompile}>\n                    {isLoading && <ReactLoading type={'bars'} color={'#ffd66b'} height={25} width={25} />}\n                </Button>\n\n                {showDownloadBtn && compileResultResponse && (\n                    <a\n                        href={`${BASE_URL}${compileResultResponse!.download}`}\n                        target=\"_blank\"\n                        rel=\"noopener noreferrer\"\n                        download=\"result.mp4\"\n                    >\n                        <Button text={'Download'}></Button>\n                    </a>\n                )}\n            </InfoDiv>\n        </>\n    );\n};\n","/Users/rohitgeddam/Development/projects/fosseeVideoProcessing/ui/src/sections/Info/index.ts",[],"/Users/rohitgeddam/Development/projects/fosseeVideoProcessing/ui/src/sections/Commons/index.ts",[],"/Users/rohitgeddam/Development/projects/fosseeVideoProcessing/ui/src/sections/Commons/LoadingScreen.tsx",[],"/Users/rohitgeddam/Development/projects/fosseeVideoProcessing/ui/src/sections/Editing/index.ts",[],"/Users/rohitgeddam/Development/projects/fosseeVideoProcessing/ui/src/sections/Info/components/Button.tsx",[],"/Users/rohitgeddam/Development/projects/fosseeVideoProcessing/ui/src/sections/Info/components/index.ts",[],"/Users/rohitgeddam/Development/projects/fosseeVideoProcessing/ui/src/sections/Upload/components/UploadCard.tsx",[],[],"/Users/rohitgeddam/Development/projects/fosseeVideoProcessing/ui/src/sections/Upload/Upload.tsx",[],"/Users/rohitgeddam/Development/projects/fosseeVideoProcessing/ui/src/sections/Editing/components/ResultsTable.tsx",["118","119"],"/* eslint-disable react/display-name */\nimport React, { useEffect, useState } from 'react';\n\nimport styled from 'styled-components';\n\nimport { Table } from 'antd';\n\nimport { BASE_URL, Chunk, ResultTableProps } from '../../../lib';\nimport { AudioUploadButton, AudioUploadMic } from '../../../sections';\n\nconst DataTableContainer = styled.div``;\n\nconst columns = [\n    {\n        title: 'Sr. No',\n        dataIndex: 'me',\n        key: 'me',\n    },\n    {\n        title: 'Start Time',\n        dataIndex: 'startTime',\n        key: 'startTime',\n    },\n    {\n        title: 'End Time',\n        dataIndex: 'endTime',\n        key: 'endTime',\n    },\n    {\n        title: 'Subtitle',\n        dataIndex: 'subtitleChunk',\n        key: 'subtitleChunk',\n    },\n    {\n        title: 'Video',\n        dataIndex: 'videoChunkPath',\n        key: 'videoChunkPath',\n        render: (link: string) => (\n            <a href={`${BASE_URL}${link}`} target=\"_blank\" rel=\"noopener noreferrer\">\n                view\n            </a>\n        ),\n    },\n    {\n        title: 'Audio',\n        dataIndex: 'audioChunkPath',\n        key: 'audioChunkPath',\n        render: (link: string) => (\n            <a href={`${BASE_URL}${link}`} target=\"_blank\" rel=\"noopener noreferrer\">\n                view\n            </a>\n        ),\n    },\n    {\n        title: 'Swap Audio File',\n        dataIndex: 'swapAudioFile',\n        key: 'swapAudioFile',\n        render: (chunkId: number) => <AudioUploadButton chunkId={chunkId} />,\n    },\n    {\n        title: 'Swap Audio Mic',\n        dataIndex: 'swapAudioMic',\n        key: 'swapAudioMic',\n        render: (chunkId: number) => <AudioUploadMic chunkId={chunkId} />,\n    },\n];\n\nexport const ResultsTable = ({ data }: ResultTableProps) => {\n    const [dataSource, setDataSource] = useState<Chunk[] | null>(null);\n\n    useEffect(() => {\n        const source = data.chunks.map((chunk: Chunk) => {\n            return {\n                key: chunk.id,\n                me: chunk.me,\n                startTime: chunk.startTime,\n                endTime: chunk.endTime,\n                subtitleChunk: chunk.subtitleChunk,\n                videoChunkPath: chunk.videoChunkPath,\n                audioChunkPath: chunk.audioChunkPath,\n                swapAudioFile: chunk.id,\n                swapAudioMic: chunk.id,\n                audioChunkLocalPath: chunk.audioChunkLocalPath,\n                audioChunkName: chunk.audioChunkName,\n                id: chunk.id,\n                operationId: chunk.operationId,\n                videoChunkLocalPath: chunk.videoChunkLocalPath,\n                videoChunkName: chunk.videoChunkName,\n            };\n        });\n        setDataSource(source);\n    }, []);\n    return (\n        <DataTableContainer>\n            <Table dataSource={dataSource!} columns={columns} />\n        </DataTableContainer>\n    );\n};\n","/Users/rohitgeddam/Development/projects/fosseeVideoProcessing/ui/src/sections/Editing/Edit.tsx",[],"/Users/rohitgeddam/Development/projects/fosseeVideoProcessing/ui/src/sections/Editing/components/index.ts",[],"/Users/rohitgeddam/Development/projects/fosseeVideoProcessing/ui/src/sections/Editing/components/AudioUploadButton.tsx",["120"],"import React, { useState } from 'react';\n\nimport styled from 'styled-components';\nimport ReactLoading from 'react-loading';\n\nimport { api } from '../../../lib/api';\nimport { ErrorBox, useError } from '../../../sections';\n\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faFileUpload } from '@fortawesome/free-solid-svg-icons';\nimport { UploadBtnProps } from '../../../lib';\n\nconst Upload = styled.div`\n    display: flex;\n    justify-content: center;\n    border: none;\n    width: 100%;\n    cursor: pointer;\n    align-items: center;\n    background-color: transparent;\n    outline: none;\n\n    label {\n        display: flex;\n    }\n    &:hover {\n        color: #ffd66b;\n    }\n    input {\n        display: none;\n    }\n`;\n\nexport const AudioUploadButton: React.FC<UploadBtnProps> = ({ chunkId }) => {\n    const [error, setError, clearError] = useError();\n\n    const [isLoading, setIsLoading] = useState<boolean>(false);\n\n    const handleAudioReupload = async (e: any): Promise<void> => {\n        setIsLoading(true);\n        const file = e.target.files[0];\n        const formData = new FormData();\n        formData.append('file', file, `${chunkId}.mp3`);\n        try {\n            await api.post(`reupload/${chunkId}`, formData, {\n                headers: {\n                    'Content-Type': 'multipart/form-data',\n                },\n            });\n        } catch (err) {\n            setError(err.message);\n        }\n        setIsLoading(false);\n    };\n\n    return (\n        <>\n            {error.isError && <ErrorBox text={error.message} onClick={clearError} />}\n            <Upload>\n                <label htmlFor={chunkId.toString()}>\n                    <FontAwesomeIcon icon={faFileUpload} />\n                    {isLoading && <ReactLoading type={'bars'} color={'#fdb827'} height={25} width={25} />}\n                </label>\n                <input id={chunkId.toString()} onChange={handleAudioReupload} type=\"file\" />\n            </Upload>\n        </>\n    );\n};\n","/Users/rohitgeddam/Development/projects/fosseeVideoProcessing/ui/src/sections/Commons/ErrorBox.tsx",[],[],"/Users/rohitgeddam/Development/projects/fosseeVideoProcessing/ui/src/sections/Commons/useError.ts",["121"],"import React, { useState } from 'react';\nimport { useErrorState, useErrorReturnType } from '../../lib';\n\nexport const useError = (): useErrorReturnType => {\n    const [error, setErrorMessage] = useState<useErrorState>({ isError: false, message: '' });\n\n    const setError = (message: string) => {\n        setErrorMessage({ isError: true, message: message });\n    };\n\n    const clearError = () => {\n        setErrorMessage({ isError: false, message: '' });\n    };\n\n    return [error, setError, clearError];\n};\n","/Users/rohitgeddam/Development/projects/fosseeVideoProcessing/ui/src/sections/Editing/components/AudioUploadMic.tsx",["122","123","124","125","126","127"],"import React, { useState, useRef } from 'react';\n\nimport styled from 'styled-components';\n\nimport MicRecorder from 'mic-recorder-to-mp3';\n\nimport { api } from '../../../lib/api';\nimport { ErrorBox, useError } from '../../../sections';\n\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faPlay, faStop } from '@fortawesome/free-solid-svg-icons';\nimport { UploadBtnProps } from '../../../lib';\n\nconst Upload = styled.div`\n    display: flex;\n    justify-content: center;\n    border: none;\n    width: 100%;\n\n    align-items: center;\n    background-color: transparent;\n    outline: none;\n`;\nconst Btn = styled.button`\n    border: none;\n    background: transparent;\n    outline: none;\n    cursor: pointer;\n    width: 100%;\n\n    &:hover {\n        transform: scale(1.2);\n        color: #ffd66b;\n    }\n`;\n\nexport const AudioUploadMic: React.FC<UploadBtnProps> = ({ chunkId }) => {\n    const [error, setError, clearError] = useError();\n    const [isRecording, setIsRecording] = useState(false);\n\n    const [isLoading, setIsLoading] = useState<boolean>(false);\n\n    const recorder = useRef<any>(null);\n\n    const handleAudioReupload = async (file: any) => {\n        const formData = new FormData();\n        formData.append('file', file);\n\n        try {\n            await api.post(`reupload/${chunkId}`, formData, {\n                headers: {\n                    'Content-Type': 'multipart/form-data',\n                },\n            });\n        } catch (err) {\n            setError(err.message);\n        }\n\n        setIsLoading(false);\n    };\n\n    const startRecording = () => {\n        recorder.current = new MicRecorder({ bitRate: 64 });\n\n        recorder.current\n            .start()\n            .then(() => {\n                // something else\n            })\n            .catch((e: any) => {\n                console.error(e);\n            });\n    };\n\n    const stopRecording = () => {\n        recorder.current\n            .stop()\n            .getMp3()\n            .then(([buffer, blob]: any) => {\n                const file = new File(buffer, `${chunkId}.mp3`, {\n                    type: blob.type,\n                    lastModified: Date.now(),\n                });\n\n                const player = new Audio(URL.createObjectURL(file));\n                player.play();\n                handleAudioReupload(file);\n            })\n            .catch((e: any) => {\n                alert('We could not retrieve your message');\n                console.log(e);\n            });\n    };\n\n    const handleRecording = () => {\n        if (!isRecording) {\n            startRecording();\n        } else {\n            stopRecording();\n        }\n\n        setIsRecording((state) => !state);\n    };\n\n    return (\n        <>\n            {error.isError && <ErrorBox text={error.message} onClick={clearError} />}\n\n            <Upload>\n                {!isRecording ? (\n                    <Btn onClick={handleRecording}>\n                        <FontAwesomeIcon icon={faPlay} />\n                    </Btn>\n                ) : (\n                    <Btn onClick={handleRecording}>\n                        <FontAwesomeIcon icon={faStop} />\n                    </Btn>\n                )}\n            </Upload>\n        </>\n    );\n};\n","/Users/rohitgeddam/Development/projects/fosseeVideoProcessing/ui/src/lib/types/index.ts",[],"/Users/rohitgeddam/Development/projects/fosseeVideoProcessing/ui/src/lib/types/typeDef.ts",[],{"ruleId":"128","severity":1,"message":"129","line":41,"column":25,"nodeType":"130","messageId":"131","endLine":41,"endColumn":44},{"ruleId":"132","severity":1,"message":"133","line":23,"column":30,"nodeType":"134","messageId":"135","endLine":23,"endColumn":33,"suggestions":"136"},{"ruleId":"128","severity":1,"message":"129","line":87,"column":45,"nodeType":"130","messageId":"131","endLine":87,"endColumn":67,"suggestions":"137"},{"ruleId":"138","severity":1,"message":"139","line":68,"column":29,"nodeType":"140","messageId":"141","endLine":68,"endColumn":60},{"ruleId":"128","severity":1,"message":"129","line":95,"column":32,"nodeType":"130","messageId":"131","endLine":95,"endColumn":43},{"ruleId":"132","severity":1,"message":"133","line":39,"column":43,"nodeType":"134","messageId":"135","endLine":39,"endColumn":46,"suggestions":"142"},{"ruleId":"143","severity":1,"message":"144","line":1,"column":8,"nodeType":"145","messageId":"146","endLine":1,"endColumn":13},{"ruleId":"143","severity":1,"message":"147","line":41,"column":12,"nodeType":"145","messageId":"146","endLine":41,"endColumn":21},{"ruleId":"132","severity":1,"message":"133","line":43,"column":29,"nodeType":"134","messageId":"135","endLine":43,"endColumn":32,"suggestions":"148"},{"ruleId":"132","severity":1,"message":"133","line":45,"column":46,"nodeType":"134","messageId":"135","endLine":45,"endColumn":49,"suggestions":"149"},{"ruleId":"132","severity":1,"message":"133","line":70,"column":24,"nodeType":"134","messageId":"135","endLine":70,"endColumn":27,"suggestions":"150"},{"ruleId":"132","severity":1,"message":"133","line":79,"column":36,"nodeType":"134","messageId":"135","endLine":79,"endColumn":39,"suggestions":"151"},{"ruleId":"132","severity":1,"message":"133","line":89,"column":24,"nodeType":"134","messageId":"135","endLine":89,"endColumn":27,"suggestions":"152"},"@typescript-eslint/no-non-null-assertion","Forbidden non-null assertion.","TSNonNullExpression","noNonNull","@typescript-eslint/no-explicit-any","Unexpected any. Specify a different type.","TSAnyKeyword","unexpectedAny",["153","154"],["155"],"@typescript-eslint/explicit-module-boundary-types","Missing return type on function.","ArrowFunctionExpression","missingReturnType",["156","157"],"@typescript-eslint/no-unused-vars","'React' is defined but never used.","Identifier","unusedVar","'isLoading' is assigned a value but never used.",["158","159"],["160","161"],["162","163"],["164","165"],["166","167"],{"messageId":"168","fix":"169","desc":"170"},{"messageId":"171","fix":"172","desc":"173"},{"messageId":"174","fix":"175","desc":"176"},{"messageId":"168","fix":"177","desc":"170"},{"messageId":"171","fix":"178","desc":"173"},{"messageId":"168","fix":"179","desc":"170"},{"messageId":"171","fix":"180","desc":"173"},{"messageId":"168","fix":"181","desc":"170"},{"messageId":"171","fix":"182","desc":"173"},{"messageId":"168","fix":"183","desc":"170"},{"messageId":"171","fix":"184","desc":"173"},{"messageId":"168","fix":"185","desc":"170"},{"messageId":"171","fix":"186","desc":"173"},{"messageId":"168","fix":"187","desc":"170"},{"messageId":"171","fix":"188","desc":"173"},"suggestUnknown",{"range":"189","text":"190"},"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct.","suggestNever",{"range":"189","text":"191"},"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of.","suggestOptionalChain",{"range":"192","text":"193"},"Consider using the optional chain operator `?.` instead. This operator includes runtime checks, so it is safer than the compile-only non-null assertion operator.",{"range":"194","text":"190"},{"range":"194","text":"191"},{"range":"195","text":"190"},{"range":"195","text":"191"},{"range":"196","text":"190"},{"range":"196","text":"191"},{"range":"197","text":"190"},{"range":"197","text":"191"},{"range":"198","text":"190"},{"range":"198","text":"191"},{"range":"199","text":"190"},{"range":"199","text":"191"},[507,510],"unknown","never",[3090,3091],"?",[983,986],[1104,1107],[1162,1165],[1798,1801],[2002,2005],[2363,2366]]